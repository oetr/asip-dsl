This is a domain-specific language that I wrote to simplify development of programs for FPGAs.

The killer feature, which is still a work in progress, is to allow the coexistence of hardware and software in the same place.
Unlike other tools, where you have to click a lot to get your signals from VHDL to be visible in the softcore, you can do both in one file.

The encouraged development approach is to write a bunch of procedures and then use them as if you were writing a computer program.
Your code will be automatically converted either to a softcore or to dedicated hardware.
You can decide what is run in parallel and what sequentially.


* Examples 
Following DSL code:
#+BEGIN_SRC racket
  (def-vhdl lights-on
    (def-i/o ;; maybe def-interface
      ;; inputs and outputs
      (o (def oLEDR (range 10 0)))
      (o (def oLEDG (range 17 0))))
    (set oLEDR 0 1))
#+END_SRC

results in the following VHDL code:

#+BEGIN_SRC vhdl
  ------------------------------------------------------------
  library ieee;
  use ieee.std_logic_1164.all;
  use ieee.numeric_std.all;
  ------------------------------------------------------------
  entity lights_on is
  
    port (
      oLEDG : out std_logic_vector(17 downto 0);
      oLEDR : out std_logic_vector(10 downto 0));
  end entity lights_on;
  ------------------------------------------------------------
  architecture arch of lights_on is
  
  begin
    oLEDR(0) <= 1;
  
  end architecture arch;
#+END_SRC

-- Peter Samarin



